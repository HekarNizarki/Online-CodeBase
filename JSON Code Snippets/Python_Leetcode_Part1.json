{
    "Python_Leetcode_with_code": [
        {
            "title": "Valid Anagram",
            "code": "def isAnagram(s,t):\n    return sorted(s)==sorted(t)"
        },
        {
            "title": "Missing Number",
            "code": "def missingNumber(nums):\n    n=len(nums)\n    return n*(n+1)//2-sum(nums)"
        },
        {
            "title": "Move Zeroes",
            "code": "def moveZeroes(nums):\n    i=0\n    for j in range(len(nums)):\n        if nums[j]!=0:\n            nums[i],nums[j]=nums[j],nums[i]\n            i+=1"
        },
        {
            "title": "Word Pattern",
            "code": "def wordPattern(pattern,s):\n    words=s.split()\n    if len(pattern)!=len(words):\n        return False\n    char_to_word={}\n    word_to_char={}\n    for c,w in zip(pattern,words):\n        if c in char_to_word:\n            if char_to_word[c]!=w:\n                return False\n        else:\n            if w in word_to_char:\n                return False\n            char_to_word[c]=w\n            word_to_char[w]=c\n    return True"
        },
        {
            "title": "Nim Game",
            "code": "def canWinNim(n):\n    return n%4!=0"
        },
        {
            "title": "Add Digits",
            "code": "def addDigits(num):\n    while num>=10:\n        num=sum(map(int,str(num)))\n    return num"
        },
        {
            "title": "Binary Search",
            "code": "def search(nums,target):\n    left,right=0,len(nums)-1\n    while left<=right:\n        mid=(left+right)//2\n        if nums[mid]==target:\n            return mid\n        elif nums[mid]<target:\n            left=mid+1\n        else:\n            right=mid-1\n    return -1"
        },
        {
            "title": "First Bad Version",
            "code": "def firstBadVersion(n):\n    left,right=1,n\n    while left<right:\n        mid=(left+right)//2\n        if isBadVersion(mid):\n            right=mid\n        else:\n            left=mid+1\n    return left"
        },
        {
            "title": "Ransom Note",
            "code": "def canConstruct(ransomNote,magazine):\n    from collections import Counter\n    return not Counter(ransomNote)-Counter(magazine)"
        },
        {
            "title": "Fizz Buzz",
            "code": "def fizzBuzz(n):\n    result=[]\n    for i in range(1,n+1):\n        if i%15==0:\n            result.append('FizzBuzz')\n        elif i%3==0:\n            result.append('Fizz')\n        elif i%5==0:\n            result.append('Buzz')\n        else:\n            result.append(str(i))\n    return result"
        },
        {
            "title": "Reverse String",
            "code": "def reverseString(s):\n    s[:]=s[::-1]"
        },
        {
            "title": "Power of Two",
            "code": "def isPowerOfTwo(n):\n    return n>0 and (n&(n-1))==0"
        },
        {
            "title": "Valid Palindrome",
            "code": "def isPalindrome(s):\n    s=''.join(c.lower() for c in s if c.isalnum())\n    return s==s[::-1]"
        },
        {
            "title": "Contains Duplicate",
            "code": "def containsDuplicate(nums):\n    return len(nums)!=len(set(nums))"
        },
        {
            "title": "Intersection of Two Arrays",
            "code": "def intersection(nums1,nums2):\n    return list(set(nums1)&set(nums2))"
        },
        {
            "title": "Happy Number",
            "code": "def isHappy(n):\n    def get_next(num):\n        return sum(int(digit)**2 for digit in str(num))\n    seen=set()\n    while n!=1 and n not in seen:\n        seen.add(n)\n        n=get_next(n)\n    return n==1"
        },
        {
            "title": "Reverse Linked List",
            "code": "class ListNode:\n    def __init__(self,val=0,next=None):\n        self.val=val\n        self.next=next\n\ndef reverseList(head):\n    prev=None\n    curr=head\n    while curr:\n        next_node=curr.next\n        curr.next=prev\n        prev=curr\n        curr=next_node\n    return prev"
        },
        {
            "title": "Implement Queue using Stacks",
            "code": "class MyQueue:\n    def __init__(self):\n        self.stack1=[]\n        self.stack2=[]\n    def push(self,x):\n        self.stack1.append(x)\n    def pop(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2.pop()\n    def peek(self):\n        if not self.stack2:\n            while self.stack1:\n                self.stack2.append(self.stack1.pop())\n        return self.stack2[-1]\n    def empty(self):\n        return not self.stack1 and not self.stack2"
        },
        {
            "title": "Power of Three",
            "code": "def isPowerOfThree(n):\n    if n<1:\n        return False\n    while n%3==0:\n        n//=3\n    return n==1"
        },
        {
            "title": "Count Primes",
            "code": "def countPrimes(n):\n    if n<2:\n        return 0\n    sieve=[True]*n\n    sieve[0]=sieve[1]=False\n    for i in range(2,int(n**0.5)+1):\n        if sieve[i]:\n            sieve[i*i:n:i]=[False]*len(sieve[i*i:n:i])\n    return sum(sieve)"
        },
        {
            "title": "Valid Perfect Square",
            "code": "def isPerfectSquare(num):\n    if num<2:\n        return True\n    left,right=2,num//2\n    while left<=right:\n        mid=(left+right)//2\n        if mid*mid==num:\n            return True\n        elif mid*mid<num:\n            left=mid+1\n        else:\n            right=mid-1\n    return False"
        },
        {
            "title": "First Unique Character in a String",
            "code": "def firstUniqChar(s):\n    from collections import Counter\n    count=Counter(s)\n    for i,char in enumerate(s):\n        if count[char]==1:\n            return i\n    return -1"
        },
        {
            "title": "Find the Difference",
            "code": "def findTheDifference(s,t):\n    from collections import Counter\n    return list((Counter(t)-Counter(s)).keys())[0]"
        },
        {
            "title": "Longest Palindrome",
            "code": "def longestPalindrome(s):\n    from collections import Counter\n    count=Counter(s)\n    length=0\n    odd_found=False\n    for char,freq in count.items():\n        if freq%2==0:\n            length+=freq\n        else:\n            length+=freq-1\n            odd_found=True\n    return length+1 if odd_found else length"
        },
        {
            "title": "Single Number",
            "code": "def singleNumber(nums):\n    result=0\n    for num in nums:\n        result^=num\n    return result"
        }
    ]
}